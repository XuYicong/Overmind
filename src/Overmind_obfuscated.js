var _0x9e16 = function (id) {
    var s = ["filter","keys","rooms","sample","length","memory","Overmind","overseer","shouldBuild","expiration","time","cache","colonies","directives","zerg","overlords","spawnGroups","colonyMap","terminalNetwork","makeTerminalNetwork","tradeNetwork","expansionPlanner","exceptions","build","debug","Rebuilding Overmind object!","registerColonies","forEach","spawnMoarOverlords","registerDirectives","refresh","refreshColonies","refreshDirectives","try","name","Caught unhandled exception at "," (identifier: ","): \n","stack",": \n","push","handleExceptions","warning","Exceptions present this tick! Rebuilding Overmind object in next tick.","stats","persistent","lastErrorTick","first","throw","Multiple exceptions caught this tick!","map","join","controller","level","terminal","groupBy","outpostFlags","suspend","notifier","alert","Colony suspended","High","flags","setPosition","roomName","pos","Suppressing instantiation of colony ","Caught unhandled exception instantiating colony ","Caught unhandled exception refreshing colony ",
    "Flag ["," @ ","print","] does not match ","a valid directive color code! (Refer to /src/directives/initializer.ts)","Use removeErrantFlags() to remove flags which do not match a directive.","init","cpu","getUsed","log","cpu.usage.",".init","run","postRun","visuals","bucket","newestVersion","isVersionOutdated","[!] Update available: "," → ","info","CPU bucket is too low (",") - skip rendering visuals.","runRoomIntel_1","defcon","creeps","signedByScreeps","sign","text","toLowerCase","includes","overmind","ᴏᴠᴇʀᴍɪɴᴅ","undefined","settings","signature","Invalid controller signatures detected:",
    "Signatures must contain the string \"Overmind\" or ","Invalid controller signatures detected; won't run this tick!","runRoomIntel_2","isAssimilated","color","secondaryColor","wrap","versionUpdater","slave_fetchVersion","CheckFrequency","CheckOnTick","requestForeignSegment","VersionSegment","getForeignSegment","version","split","master_pushVersion","requestSegments","markSegmentAsPublic","setSegmentProperty","generateUpdateMessage",
    "<a href=\"https://github.com/bencbartlett/Overmind/releases\">Download</a>","<a href=\"https://github.com/bencbartlett/Overmind/blob/master/CHANGELOG.md\">Patch notes</a>",
    "╔═════════════════════════════════════════════════════════╗\n\
    ","║            Update available: ","              ║\n\
    ","║            > "," <    > "," <              ║\n\
    ","╚═════════════════════════════════════════════════════════╝",
    "generateUpdateMessageSmall","╔═════════════════════════════════╗\n\
    ","║       OVERMIND SCREEPS AI       ║\n\
    ","╠═════════════════════════════════╣\n\
    ","║ Update available: "," ║\n\
    ","║ > "," < ║\n\
    ","╚═════════════════════════════════╝",
    "displayUpdateMessage","<font color='#ff00ff'>","</font>","sayUpdateMessage","say","Update me!","notifyNewVersion","notify",];
    return s[Number(id)];
};
//
// Overmind_obfuscated.js: this file is intentially obfuscated to prevent tampering.
//
// Q: Why is this file obfuscated?
//
// A: Using Overmind as your AI puts you at a huge advantage if you are a new player in a novice zone. Screeps has
//    always had problems with people downloading bots from the internet and stomping new players. I have kept Overmind
//    open-sourced because I think it can be a good resource for learning how to play Screeps, but I don't want it to
//    be abused as a noob-crushing machine. In the future, I will be implementing behavioral locks in this file which
//    limit unreasonable aggression toward peaceful new players.
//
// Q: What kind of behavioral locks?
//
// A: Players will be able to opt out of aggression by setting a property in their public memory. Overmind bots will not
//    attack the player unless they attack you, claim a room in Overmind's territory, or occupy a room which is
//    critically important (for example, very desirable mineral deposits that aren't available elsewhere). Overmind
//    will attempt to expand around players which pose no threat to it rather than eliminating them.
//
// Q: What does this file do?
//
// A: The Overmind object is the top-level initializer of the AI and instantiates all colonies and directives. It is
//    also responsible for some high-level decision making. You can see the enumerated properties of the Overmind class
//    in IOvermind in declarations/index.d.ts. Since this file is sufficiently complex and is critical for the AI to be
//    able to run, it was a natural choice of location to put code which should be tamper-resistant.
//
// Q: What happens if I modify this code?
//
// A: This code is self-defending, so any modification to it will likely break the script.
//
// Q: I would like to view the original source code for this file.
//
// A: If you have a compelling reason that you'd like to see the non-obfuscated source for this file, message me in
//    game, on slack, or send me an email at benbartlett@stanford.edu.
//
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d; if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function') r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r; return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { assimilationLocked } from './assimilation/decorator'; import { GameCache } from './caching/GameCache'; import { Colony, getAllColonies } from './Colony'; import { log } from './console/log'; import { AllContracts } from './contracts/contractsList'; import { DirectiveWrapper } from './directives/initializer'; import { NotifierPriority } from './directives/Notifier'; import { RoomIntel } from './intel/RoomIntel'; import { TerminalNetwork } from './logistics/TerminalNetwork'; import { TraderJoe } from './logistics/TradeNetwork'; import { Mem } from './memory/Memory'; import { Segmenter } from './memory/Segmenter'; import { Overseer } from './Overseer'; import { profile } from './profiler/decorator'; import { Stats } from './stats/stats'; import { ExpansionPlanner } from './strategy/ExpansionPlanner'; import { alignedNewline } from './utilities/stringConstants'; import { bulleted } from './utilities/utils'; import { asciiLogoSmall } from './visuals/logos'; import { Visualizer } from './visuals/Visualizer'; import { MUON, MY_USERNAME, NEW_OVERMIND_INTERVAL, PROFILER_COLONY_LIMIT, PROFILER_INCLUDE_COLONIES, USE_PROFILER, USE_TRY_CATCH } from './~settings';// javascript-obfuscator:enable
const profilerRooms = {};
if (USE_PROFILER) {
    for (const name of PROFILER_INCLUDE_COLONIES) { profilerRooms[name] = !![]; }
    const myRoomNames = _[_0x9e16('0x0')](_[_0x9e16('0x1')](Game[_0x9e16('0x2')]), _0x15b99f => Game[_0x9e16('0x2')][_0x15b99f] && Game[_0x9e16('0x2')][_0x15b99f]['my']);
    for (const name of _[_0x9e16('0x3')](myRoomNames, PROFILER_COLONY_LIMIT - PROFILER_INCLUDE_COLONIES[_0x9e16('0x4')])) { profilerRooms[name] = !![]; }
}
let _Overmind = class _Overmind {
    constructor() { this[_0x9e16('0x5')] = Memory[_0x9e16('0x6')]; this[_0x9e16('0x7')] = new Overseer(); this[_0x9e16('0x8')] = !![]; this[_0x9e16('0x9')] = Game[_0x9e16('0xa')] + NEW_OVERMIND_INTERVAL; this[_0x9e16('0xb')] = new GameCache(); this[_0x9e16('0xc')] = {}; this[_0x9e16('0xd')] = {}; this[_0x9e16('0xe')] = {}; this[_0x9e16('0xf')] = {}; this[_0x9e16('0x10')] = {}; this[_0x9e16('0x11')] = {}; this[_0x9e16('0x12')] = this[_0x9e16('0x13')](); this[_0x9e16('0x14')] = new TraderJoe(); this[_0x9e16('0x15')] = new ExpansionPlanner(); this[_0x9e16('0x16')] = []; }
    [_0x9e16('0x17')]() { log[_0x9e16('0x18')](_0x9e16('0x19')); this[_0x9e16('0xb')][_0x9e16('0x17')](); this[_0x9e16('0x1a')](); _[_0x9e16('0x1b')](this[_0x9e16('0xc')], _0x1735ae => _0x1735ae[_0x9e16('0x1c')]()); this[_0x9e16('0x1d')](); _[_0x9e16('0x1b')](this[_0x9e16('0xd')], _0x912fc0 => _0x912fc0[_0x9e16('0x1c')]()); this[_0x9e16('0x8')] = ![]; }
    [_0x9e16('0x1e')]() { this[_0x9e16('0x8')] = !![]; this[_0x9e16('0x5')] = Memory[_0x9e16('0x6')]; this[_0x9e16('0x16')] = []; this[_0x9e16('0xb')][_0x9e16('0x1e')](); this[_0x9e16('0x7')][_0x9e16('0x1e')](); this[_0x9e16('0x12')][_0x9e16('0x1e')](); this[_0x9e16('0x14')][_0x9e16('0x1e')](); this[_0x9e16('0x15')][_0x9e16('0x1e')](); this[_0x9e16('0x1f')](); this[_0x9e16('0x20')](); for (const _0x3d642a in this[_0x9e16('0xf')]) { this[_0x9e16('0xf')][_0x3d642a][_0x9e16('0x1e')](); } for (const _0x59bd84 in this[_0x9e16('0x10')]) { this[_0x9e16('0x10')][_0x59bd84][_0x9e16('0x1e')](); } this[_0x9e16('0x8')] = ![]; } [_0x9e16('0x21')](_0x114412, _0x1bda8b) { if (USE_TRY_CATCH) { try { _0x114412(); } catch (_0x3a5d72) { if (_0x1bda8b) { _0x3a5d72[_0x9e16('0x22')] = _0x9e16('0x23') + ('' + _0x114412) + _0x9e16('0x24') + _0x1bda8b + _0x9e16('0x25') + _0x3a5d72[_0x9e16('0x22')] + '\x0a' + _0x3a5d72[_0x9e16('0x26')]; } else { _0x3a5d72[_0x9e16('0x22')] = _0x9e16('0x23') + ('' + _0x114412) + _0x9e16('0x27') + _0x3a5d72[_0x9e16('0x22')] + '\x0a' + _0x3a5d72[_0x9e16('0x26')]; } this[_0x9e16('0x16')][_0x9e16('0x28')](_0x3a5d72); } } else { _0x114412(); } }
    [_0x9e16('0x29')]() { if (this[_0x9e16('0x16')][_0x9e16('0x4')] == 0x0) { return; } else { log[_0x9e16('0x2a')](_0x9e16('0x2b')); Memory[_0x9e16('0x2c')][_0x9e16('0x2d')][_0x9e16('0x2e')] = Game[_0x9e16('0xa')]; this[_0x9e16('0x8')] = !![]; this[_0x9e16('0x9')] = Game[_0x9e16('0xa')]; if (this[_0x9e16('0x16')][_0x9e16('0x4')] == 0x1) { throw _[_0x9e16('0x2f')](this[_0x9e16('0x16')]); } else { for (const _0x2343dd of this[_0x9e16('0x16')]) { log[_0x9e16('0x30')](_0x2343dd); } const _0x35c82d = new Error(_0x9e16('0x31')); _0x35c82d[_0x9e16('0x26')] = _[_0x9e16('0x32')](this[_0x9e16('0x16')], _0x5473ed => _0x5473ed[_0x9e16('0x22')])[_0x9e16('0x33')]('\x0a'); throw _0x35c82d; } } }
    [_0x9e16('0x13')]() { const _0x59b161 = []; for (const _0x2f49d8 in Game[_0x9e16('0x2')]) { if (USE_PROFILER && !profilerRooms[_0x2f49d8]) continue; const _0x83e0ef = Game[_0x9e16('0x2')][_0x2f49d8]; if (_0x83e0ef['my'] && _0x83e0ef[_0x9e16('0x34')][_0x9e16('0x35')] >= 0x6 && _0x83e0ef[_0x9e16('0x36')] && _0x83e0ef[_0x9e16('0x36')]['my']) { _0x59b161[_0x9e16('0x28')](_0x83e0ef[_0x9e16('0x36')]); } } return new TerminalNetwork(_0x59b161); }
    [_0x9e16('0x1a')]() { const _0x99b320 = {}; this[_0x9e16('0x11')] = {}; const _0x25b837 = _[_0x9e16('0x37')](this[_0x9e16('0xb')][_0x9e16('0x38')], _0x4864bd => _0x4864bd[_0x9e16('0x5')]['C']); for (const _0x4be59a in Game[_0x9e16('0x2')]) { if (Game[_0x9e16('0x2')][_0x4be59a]['my']) { const _0x91b52f = Memory[_0x9e16('0xc')][_0x4be59a]; if (_0x91b52f && _0x91b52f[_0x9e16('0x39')]) { this[_0x9e16('0x7')][_0x9e16('0x3a')][_0x9e16('0x3b')](_0x9e16('0x3c'), _0x4be59a, NotifierPriority[_0x9e16('0x3d')]); continue; } if (Game[_0x9e16('0x2')][_0x4be59a][_0x9e16('0x3e')]) { _0x99b320[_0x4be59a] = _[_0x9e16('0x32')](_0x25b837[_0x4be59a], _0x2cf1b0 => _0x2cf1b0[_0x9e16('0x5')][_0x9e16('0x3f')] ? derefRoomPosition(_0x2cf1b0[_0x9e16('0x5')][_0x9e16('0x3f')])[_0x9e16('0x40')] : _0x2cf1b0[_0x9e16('0x41')][_0x9e16('0x40')]); } this[_0x9e16('0x11')][_0x4be59a] = _0x4be59a; } } for (const _0x31d8dc in _0x99b320) { for (const _0x78ab2d of _0x99b320[_0x31d8dc]) { this[_0x9e16('0x11')][_0x78ab2d] = _0x31d8dc; } } let _0x3d5123 = 0x0; for (const _0x5dec7d in _0x99b320) { if (USE_PROFILER && !profilerRooms[_0x5dec7d]) { if (Game[_0x9e16('0xa')] % 0x14 == 0x0) { log[_0x9e16('0x3b')](_0x9e16('0x42') + _0x5dec7d + '.'); } continue; } try { this[_0x9e16('0xc')][_0x5dec7d] = new Colony(_0x3d5123, _0x5dec7d, _0x99b320[_0x5dec7d]); } catch (_0x2be08f) { _0x2be08f[_0x9e16('0x22')] = _0x9e16('0x43') + _0x5dec7d + _0x9e16('0x27') + _0x2be08f[_0x9e16('0x22')]; this[_0x9e16('0x16')][_0x9e16('0x28')](_0x2be08f); } _0x3d5123++; } }
    [_0x9e16('0x1f')]() { for (const _0x3ee798 in this[_0x9e16('0xc')]) { try { this[_0x9e16('0xc')][_0x3ee798][_0x9e16('0x1e')](); } catch (_0x2b1bf4) { _0x2b1bf4[_0x9e16('0x22')] = _0x9e16('0x44') + _0x3ee798 + _0x9e16('0x27') + _0x2b1bf4[_0x9e16('0x22')]; this[_0x9e16('0x16')][_0x9e16('0x28')](_0x2b1bf4); } } } [_0x9e16('0x1d')](_0x7bd91 = ![]) { for (const _0x4d31b6 in Game[_0x9e16('0x3e')]) { if (this[_0x9e16('0xd')][_0x4d31b6]) { continue; } const _0x53d7dd = Game[_0x9e16('0x3e')][_0x4d31b6][_0x9e16('0x5')]['C']; if (_0x53d7dd) { if (USE_PROFILER && !profilerRooms[_0x53d7dd]) { continue; } const _0x51f1bf = Memory[_0x9e16('0xc')][_0x53d7dd]; if (_0x51f1bf && _0x51f1bf[_0x9e16('0x39')]) { continue; } } const _0x5cd134 = DirectiveWrapper(Game[_0x9e16('0x3e')][_0x4d31b6]); const _0x2a3fe2 = !!this[_0x9e16('0xd')][_0x4d31b6]; if (_0x5cd134 && _0x2a3fe2 && _0x7bd91) { _0x5cd134[_0x9e16('0x1c')](); } if (!_0x5cd134 && Game[_0x9e16('0xa')] % 0xa == 0x0) { log[_0x9e16('0x3b')](_0x9e16('0x45') + _0x4d31b6 + _0x9e16('0x46') + Game[_0x9e16('0x3e')][_0x4d31b6][_0x9e16('0x41')][_0x9e16('0x47')] + _0x9e16('0x48') + _0x9e16('0x49') + alignedNewline + _0x9e16('0x4a')); } } }
    [_0x9e16('0x20')]() { for (const _0x43ebde in this[_0x9e16('0xd')]) { this[_0x9e16('0xd')][_0x43ebde][_0x9e16('0x1e')](); } this[_0x9e16('0x1d')](!![]); }
    [_0x9e16('0x4b')]() { this[_0x9e16('0x21')](() => this[_0x9e16('0x12')][_0x9e16('0x4b')]()); this[_0x9e16('0x21')](() => this[_0x9e16('0x14')][_0x9e16('0x4b')]()); this[_0x9e16('0x7')][_0x9e16('0x4b')](); for (const _0x24fb7d in this[_0x9e16('0xc')]) { const _0x10bc23 = Game[_0x9e16('0x4c')][_0x9e16('0x4d')](); this[_0x9e16('0x21')](() => this[_0x9e16('0xc')][_0x24fb7d][_0x9e16('0x4b')](), _0x24fb7d); Stats[_0x9e16('0x4e')](_0x9e16('0x4f') + _0x24fb7d + _0x9e16('0x50'), Game[_0x9e16('0x4c')][_0x9e16('0x4d')]() - _0x10bc23); } for (const _0x4d32b3 in this[_0x9e16('0x10')]) { this[_0x9e16('0x21')](() => this[_0x9e16('0x10')][_0x4d32b3][_0x9e16('0x4b')](), _0x4d32b3); } this[_0x9e16('0x21')](() => this[_0x9e16('0x15')][_0x9e16('0x4b')]()); }
    [_0x9e16('0x51')]() { if (Game[_0x9e16('0xa')] % 0x3 == 0x0) { IntelManagement[_0x9e16('0x51')](); } for (const _0x271ad2 in this[_0x9e16('0x10')]) { this[_0x9e16('0x21')](() => this[_0x9e16('0x10')][_0x271ad2][_0x9e16('0x51')](), _0x271ad2); } this[_0x9e16('0x7')][_0x9e16('0x51')](); for (const _0x339ce6 in this[_0x9e16('0xc')]) { this[_0x9e16('0x21')](() => this[_0x9e16('0xc')][_0x339ce6][_0x9e16('0x51')](), _0x339ce6); } if (MY_USERNAME == MUON) { for (const _0x51f212 of AllContracts) { this[_0x9e16('0x21')](() => _0x51f212[_0x9e16('0x51')]()); } } this[_0x9e16('0x21')](() => this[_0x9e16('0x12')][_0x9e16('0x51')]()); this[_0x9e16('0x21')](() => this[_0x9e16('0x14')][_0x9e16('0x51')]()); this[_0x9e16('0x21')](() => this[_0x9e16('0x15')][_0x9e16('0x51')]()); this[_0x9e16('0x21')](() => RoomIntel[_0x9e16('0x51')]()); this[_0x9e16('0x21')](() => Assimilator[_0x9e16('0x51')]()); }
    [_0x9e16('0x52')]() { this[_0x9e16('0x21')](() => VersionUpdater[_0x9e16('0x51')]()); this[_0x9e16('0x21')](() => Segmenter[_0x9e16('0x51')]()); this[_0x9e16('0x29')](); }
    [_0x9e16('0x53')]() { if (Game[_0x9e16('0x4c')][_0x9e16('0x54')] > 0x2328) { Visualizer[_0x9e16('0x53')](); if (VersionUpdater[_0x9e16('0x5')][_0x9e16('0x55')]) { const _0x458fea = VersionUpdater[_0x9e16('0x5')][_0x9e16('0x55')]; if (VersionUpdater[_0x9e16('0x56')](_0x458fea)) { this[_0x9e16('0x7')][_0x9e16('0x3a')][_0x9e16('0x3b')](_0x9e16('0x57') + __VERSION__ + _0x9e16('0x58') + _0x458fea, undefined, -0x1); } } this[_0x9e16('0x7')][_0x9e16('0x53')](); for (const _0x64d8ea in this[_0x9e16('0xc')]) { this[_0x9e16('0xc')][_0x64d8ea][_0x9e16('0x53')](); } } else { if (Game[_0x9e16('0xa')] % 0xa == 0x0) { log[_0x9e16('0x59')](_0x9e16('0x5a') + Game[_0x9e16('0x4c')][_0x9e16('0x54')] + _0x9e16('0x5b')); } } }
}; _Overmind = __decorate([profile, assimilationLocked], _Overmind);
export default _Overmind;
class IntelManagement {
    static [_0x9e16('0x5c')]() { const _0x3ee848 = []; const _0x238a99 = getAllColonies(); if (_0x238a99[_0x9e16('0x4')] == 0x0) return; for (const _0x408b57 of _0x238a99) { if (_0x408b57[_0x9e16('0x5d')] > 0x0 || _0x408b57[_0x9e16('0x5e')][_0x9e16('0x4')] == 0x0) { continue; } const _0x4e5e12 = _0x408b57[_0x9e16('0x34')]; if (_0x4e5e12[_0x9e16('0x5f')] || _0x4e5e12[_0x9e16('0x35')] < 0x4) { continue; } let _0x180b13 = ![]; if (_0x4e5e12[_0x9e16('0x60')]) { const _0x2846ef = _0x4e5e12[_0x9e16('0x60')][_0x9e16('0x61')]; if (_0x2846ef[_0x9e16('0x62')]()[_0x9e16('0x63')](_0x9e16('0x64')) || _0x2846ef[_0x9e16('0x63')](_0x9e16('0x65'))) { _0x180b13 = !![]; } } if (!_0x180b13) { _0x3ee848[_0x9e16('0x28')](_0x4e5e12[_0x9e16('0x60')] ? _0x4e5e12[_0x9e16('0x60')][_0x9e16('0x61')] : _0x9e16('0x66')); } } _[_0x9e16('0x1')](Overmind[_0x9e16('0xc')]) } static [_0x9e16('0x6c')]() { if (!Assimilator[_0x9e16('0x6d')](MY_USERNAME)) { const _0x5a2622 = [[COLOR_RED, COLOR_RED]]; for (const _0x2c0dbd in Game[_0x9e16('0x3e')]) { const _0x3a00ca = Game[_0x9e16('0x3e')][_0x2c0dbd]; const _0x1c0b76 = [_0x3a00ca[_0x9e16('0x6e')], _0x3a00ca[_0x9e16('0x6f')]]; if (_0x5a2622[_0x9e16('0x63')](_0x1c0b76)) { } } } } static [_0x9e16('0x51')]() { this[_0x9e16('0x5c')](); if (Game[_0x9e16('0xa')] % (0x3 * 0x1f) == 0x0) { this[_0x9e16('0x6c')](); } }
}
class VersionUpdater {
    static get [_0x9e16('0x5')]() { return Mem[_0x9e16('0x70')](Memory[_0x9e16('0x6')], _0x9e16('0x71'), { 'versions': {}, 'newestVersion': undefined }); }
    static [_0x9e16('0x72')]() { if (Game[_0x9e16('0xa')] % this.CheckFrequency == this.CheckOnTick - 0x1) { Segmenter[_0x9e16('0x75')](MUON, this[_0x9e16('0x76')]); } else if (Game[_0x9e16('0xa')] % this.CheckFrequency == this.CheckOnTick) { const _0x25ce0d = Segmenter[_0x9e16('0x77')](); if (_0x25ce0d) { return _0x25ce0d[_0x9e16('0x78')]; } } }
    static [_0x9e16('0x56')](_0xaa5430) { const [_0x2ae244, _0x5391fd, _0x24c5a1] = _[_0x9e16('0x32')](__VERSION__[_0x9e16('0x79')]('.'), _0x2ae98a => parseInt(_0x2ae98a, 0xa)); const [_0x34116f, _0x2e335f, _0xc5c749] = _[_0x9e16('0x32')](_0xaa5430[_0x9e16('0x79')]('.'), _0x129f43 => parseInt(_0x129f43, 0xa)); return _0x34116f > _0x2ae244 || _0x2e335f > _0x5391fd || _0xc5c749 > _0x24c5a1; }
    static [_0x9e16('0x7a')]() { if (Game[_0x9e16('0xa')] % this.CheckFrequency == this.CheckOnTick - 0x2) { Segmenter[_0x9e16('0x7b')](this[_0x9e16('0x76')]); } else if (Game[_0x9e16('0xa')] % this.CheckFrequency == this.CheckOnTick - 0x1) { Segmenter[_0x9e16('0x7c')](this[_0x9e16('0x76')]); Segmenter[_0x9e16('0x7d')](this[_0x9e16('0x76')], _0x9e16('0x78'), __VERSION__); } }
    static [_0x9e16('0x7e')](_0x504723, _0x19a7e9) { let _0x5d0856 = '\x0a'; for (const _0x425873 of asciiLogoSmall) { _0x5d0856 += _0x425873 + '\x0a'; } const _0x52d706 = _0x9e16('0x7f'); const _0x2227a9 = _0x9e16('0x80'); const _0x23de82 = _0x9e16('0x81') + (_0x9e16('0x82') + _0x504723 + _0x9e16('0x58') + _0x19a7e9 + _0x9e16('0x83')) + (_0x9e16('0x84') + _0x52d706 + _0x9e16('0x85') + _0x2227a9 + _0x9e16('0x86')) + _0x9e16('0x87'); return _0x5d0856 + _0x23de82; } static [_0x9e16('0x88')](_0x3af0f4, _0x492f50) { const _0x207d2f = _0x9e16('0x7f'); const _0x5e5126 = _0x9e16('0x80'); const _0x64ac05 = _0x9e16('0x89') + _0x9e16('0x8a') + _0x9e16('0x8b') + (_0x9e16('0x8c') + _0x3af0f4 + _0x9e16('0x58') + _0x492f50 + _0x9e16('0x8d')) + (_0x9e16('0x8e') + _0x207d2f + _0x9e16('0x85') + _0x5e5126 + _0x9e16('0x8f')) + _0x9e16('0x90'); return '\x0a' + _0x64ac05; } static [_0x9e16('0x91')](_0x4ee7ac) { const _0x44c6f2 = this[_0x9e16('0x7e')](__VERSION__, _0x4ee7ac); console[_0x9e16('0x4e')](_0x9e16('0x92') + _0x44c6f2 + _0x9e16('0x93')); } static [_0x9e16('0x94')](_0xef121e) { for (const _0x15d424 in Game[_0x9e16('0x5e')]) { const _0x3c552a = Game[_0x9e16('0x5e')][_0x15d424]; _0x3c552a[_0x9e16('0x95')](_0x9e16('0x96'), !![]); } } static [_0x9e16('0x97')](_0x57ca27) { const _0x458837 = this[_0x9e16('0x88')](__VERSION__, _0x57ca27); Game[_0x9e16('0x98')](_0x9e16('0x92') + _0x458837 + _0x9e16('0x93')); }
    static [_0x9e16('0x51')]() { if (MY_USERNAME == MUON) { this[_0x9e16('0x7a')](); } const _0x299af9 = this[_0x9e16('0x72')](); if (_0x299af9) { this[_0x9e16('0x5')][_0x9e16('0x55')] = _0x299af9; } const _0x2cb767 = this[_0x9e16('0x5')][_0x9e16('0x55')]; if (_0x2cb767 && this[_0x9e16('0x56')](_0x2cb767)) { if (Game[_0x9e16('0xa')] % 0xa == 0x0) { this[_0x9e16('0x91')](_0x2cb767); this[_0x9e16('0x94')](_0x2cb767); } if (Game[_0x9e16('0xa')] % 0x2710 == 0x0) { this[_0x9e16('0x97')](_0x2cb767); } } }
}
VersionUpdater.CheckFrequency = 0x64;
VersionUpdater.CheckOnTick = 0x5b;
VersionUpdater[_0x9e16('0x76')] = 0x63;